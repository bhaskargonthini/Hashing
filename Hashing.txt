HASHING

In hashing search, insert and delete can be done in O(1) on average.
Hashing will be the ebst choice than other data structures like arrays,BST etc....
Hashing is the best choice only if we want to use operations like search, insert and delete opearations only.
But not useful for:
  - finding the closest value.
  -sorted data
  -prefix searching
Applications of Hashing: second most used data structure.
  --Dictionaries
  --Database indexing
  --cryptography
  --caches
  --symbol tables in compilers/interpreters
  --routers
  --getting data from databases etc...
The problem with the arrays data structure or direct address table is it cant handle large inpit vaalues like phone numbers which contains 10 digit numbers and also floating
pount numbers,

Hashing INTRO:
How hash funtion works?
-- should always map a large key to same small key
-- should generate values from 0 to m-1
-- should be fast, O(1) for integers and O(len) for string of length len
-- should uniformly distribute learge keys into hash table slots.

Example of hash functions:
1) h(large_key) = large_key%m
2) for strings, weighted sum:
    str[] = "abcd"
    (str[0]*x^0+str[1]*x^1+str[2]*x^2+str[3]*x^3)%m
 3) universal hashing
 
 Here we are doing modulus of a specific number while allocating the numbers to keys, so there might be cases where one value might be repeated when doing the modulus
 function, so there will be a problem of collision. So we can talk about collision handlinbg.
 ex: 132%10 = 2 and also 142%10 = 2 so these two values might be collided while alloting to the hash table
 COLLISION HANDLING:
 If we know the keys in advance, then we can find the perfect hasing function.
 If we do not know the keys, then we use one of the following
  -- chaining
  --Open addressing
      -- Linear probing
      -- Quadratic probing
      -- Double hashing.
CHAINING:
Chaining will works with array of llinked lists, where if there is collision in the keys, then it will form an extra node with the existing one and start implementing the 
linked list from that node. Eg...
Hash(key) = key%7
keys = {50,21,58,17,15,49,56,22,23,25}

0 -> 21 ->49 ->56
1 -> 50 ->15 ->22
2 -> 58 ->23
3 -> 17
4 -> 25
5
6

IMPLEMENTATION OF CHAINING:
// C++ program to demonstrate implementation of our 
// own hash table with chaining for collision detection 
#include<bits/stdc++.h>
using namespace std;

struct MyHash
{
    int BUCKET;
    list<int> *table;
    MyHash(int b)
    {
        BUCKET = b;
        table = new list<int>[BUCKET];
    }
    void insert(int k)
    {
        int i = k % BUCKET;
        table[i].push_back(k);
    }
    bool search(int k)
    {
        int i = k % BUCKET;
        for (auto x : table[i])
           if (x == k)
              return true;
        return false;      
    }
    void remove(int k)
    {
        int i = k % BUCKET;
        table[i].remove(k);
    }
};

	// Driver method to test Map class 
	int main() 
	{ 
	    MyHash mh(7);
	    mh.insert(10);
	    mh.insert(20);
	    mh.insert(15);
	    mh.insert(7);
	    cout << mh.search(10) << endl;
	    mh.remove(15);
	    cout << mh.search(15);
	} 
another way:
vector<vector<int>> separateChaining(int hashSize,int arr[],int sizeOfArray)
    {
       //Your code here
        vector<vector<int>> ans(hashSize);
       for(int i=0;i<sizeOfArray;i++){
           ans[arr[i]%hashSize].push_back(arr[i]);
       }
       return ans;
       
    }
    
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
  OPEN ADDRESSING:
  
  No of slots in hash table >= no of keys to be inserted.
  Liner probing:
    Linearly search for next empty slot when there is a collision.
    
  Implementation of open addressing:
    
    #include<bits/stdc++.h>
using namespace std;

struct MyHash
{
    int *arr;
    int cap,size;
    
    MyHash(int c)
    {
        cap=c;
        size=0;
        arr=new int[cap];
        for(int i=0;i<cap;i++)
            arr[i]=-1;
    }
    
    int hash(int key){
        return key%cap;
    }
    bool insert(int key)
    {
        if(size==cap)
            return false;
        int i=hash(key);
        while(arr[i]!=-1 && arr[i]!=-2 && arr[i]!=key)
            i=(i+1)%cap;
        if(arr[i]==key)
            return false;
        else{
            arr[i]=key;
            size++;
            return true;
        }
    }
    bool search(int key)
    {
        int h=hash(key);
        int i=h;
        while(arr[i]!=-1){
            if(arr[i]==key)
                return true;
            i=(i+1)%cap;
            if(i==h)
                return false;
        }
        return false;
    }
    bool erase(int key)
    {   
        int h=hash(key);
        int i=h;
        while(arr[i]!=-1){
            if(arr[i]==key){
                arr[i]=-2;
                return true;
            }
            i=(i+1)%cap;
            if(i==h)
                return false;
        }
        return false;
    }
};

	int main() 
	{ 
	    MyHash mh(7);
	    mh.insert(49);
	    mh.insert(56);
	    mh.insert(72);
	    if(mh.search(56)==true)
	        cout<<"Yes"<<endl;
	    else
	        cout<<"No"<<endl;
	    mh.erase(56);
	    if(mh.search(56)==true)
	        cout<<"Yes"<<endl;
	    else
	        cout<<"No"<<endl;
	} 
----------------------------------------------------------------------------------------------------------------------------------------------------------------
UNORDERED SET IN STL: there cannot be duplicate keys in unordered set.

unlike set, unordered set has different functionalities. If we insert elements in unordered set, when we print the ouput the output sequences may differ in different compilers. There is no specific order in which these elements are stored in the unordered set.
Different functions of unordered set are:
insert() - insert an element into the set.
begin() - returns the iterator of first element
end()- return an ietrator beyond the end element.
size() - gives the size of the set
clear() - empties the set
find() - finds the element in the set. If present it return the address of that element. Else it return variableName.end().
count() - returns either 1 or 0 if elements is present or not. similar to find but it returns 1 or 0.
Erase() - used to remove a single item or range of items in the set.
all functions have O(1) time complexity in an average.
#include <bits/stdc++.h> 
using namespace std; 

int main(){
    
    unordered_set <int> s;
    s.insert(10);
    s.insert(5);
    s.insert(15);
    s.insert(20);
    for(int x: s)
        cout<<x<<" ";
        
    cout<<endl;
    for(auto it=s.begin();it!=s.end();it++)
        cout<<*it<<" ";
    cout<<endl;
    cout<<s.size()<<endl;
    s.clear();
    cout<<s.size()<<endl;
    
    s.insert(10);
    s.insert(5);
    s.insert(15);
    s.insert(20);
    cout<<s.size()<<endl;
    
    if(s.find(15)==s.end())
        cout<<"Not Found";
    else
        cout<<"Found "<<(*s.find(15));
    
    cout<<endl;   
    if(s.count(15))
        cout<<"Found";
    else
        cout<<"Not Found";
    cout<<endl;
    
    cout<<s.size()<<endl;
    s.erase(15);
    cout<<s.size()<<endl;
    auto it=s.find(10);
    s.erase(it);
    cout<<s.size()<<endl;
    
    s.erase(s.begin(),s.end());
        
    return 0;
}

--------------------------------------------------
UNORDERED HASHMAP IN STL:
-- used to store key value pairs.
-- uses hashing
-- no order of keys.

#include <bits/stdc++.h> 
using namespace std; 

int main(){
    
    unordered_map <string,int> m;
    m["gfg"]=20;
    m["ide"]=30;
    m.insert({"courses",15});
    
    if(m.find("ide")!=m.end())
        cout<<"Found";
    else
        cout<<"Not Found ";
    
    cout<<endl;
    
    for(auto it=m.begin();it!=m.end();it++)
        cout<<(it->first)<<" "<<(it->second)<<endl;
    
    if(m.count("ide")>0)
        cout<<"Found";
    else
        cout<<"Not Found";
    cout<<endl;
    
    cout<<m.size()<<endl;
    m.erase("ide");
    m.erase(m.begin());
    cout<<m.size()<<endl;
    m.erase(m.begin(),m.end());
        
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------COUNT DISTNCT ELEMENTS:

int countDistinct(int arr[], int n)
{
    unordered_set<int> us;
    for(int i = 0; i < n; i++)
      us.insert(arr[i]);
      
    return us.size();
}

Another variation:
COUNT NON REPEATED ELEMENTS:
Hashing is very useful to keep track of the frequency of the elements in a list.

You are given an array of integers. You need to print the count of non-repeated elements in the array.

Example 1:

Input:
10
1 1 2 2 3 3 4 5 6 7

Output: 
4

Explanation: 
4, 5, 6 and 7 are the 
elements with frequency 1 and rest 
elements are repeated so the number 
of non-repeated elements are 4.

int countNonRepeated(int arr[], int n)
    {
        //Your code here
        unordered_set<int> set1;
        unordered_set<int> set2;
        for(int i=0;i<n;i++){
            if(set1.count(arr[i]) == 0)
            set1.insert(arr[i]);
            else if(set2.count(arr[i]) == 0)
            set2.insert(arr[i]);
        }
        return (set1.size()-set2.size());
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Print Non-Repeated Elements:
Hashing is very useful to keep track of the frequency of the elements in a list.

You are given an array of integers. You need to print the non-repeated elements as they appear in the array.

Example 1:

Input:
n = 10
arr[] = {1,1,2,2,3,3,4,5,6,7}
Output: 4 5 6 7
Explanation: 4, 5, 6 and 7 are the only 
elements which is having only 1 
frequency and hence, Non-repeating.

vector<int> printNonRepeated(int arr[],int n)
    {
        //Your code here
        vector<int> res;
        unordered_map<int,int> s;
        for(int i=0;i<n;i++){
            s[arr[i]]++;
        }
        for(int i=0;i<n;i++){
            if(s[arr[i]] == 1)
            res.push_back(arr[i]);
        }
        return res;
        
    }
    
    -----------------------------------------------------------------------------------------------------------------------------------------------------------
    INTERSECTION OF TWO ARRAYS:
    
    Given two arrays a[] and b[] respectively of size n and m, the task is to print the count of elements in the intersection (or common elements) of the two arrays.

For this question, the intersection of two arrays can be defined as the set containing distinct common elements between the two arrays. 

Example 1:

Input:
n = 5, m = 3
a[] = {89, 24, 75, 11, 23}
b[] = {89, 2, 4}

Output: 1

Explanation: 
89 is the only element 
in the intersection of two arrays.
    
     int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Your code goes here
        unordered_set<int> res;
        int count = 0;
        for(int i=0;i<n;i++)
        res.insert(a[i]);
        for(int i=0;i<m;i++){
            if(res.count(b[i]) == 1)
            count++;
            res.erase(b[i]);
        }
        return count;
    }
    
   -----------------------------------------------------------------------------------------------------------------------------------------------------------------
   
UNION OF TWO UNSORTED ARRAYS:
int doUnion(int a[], int n, int b[], int m)  {
        //code here
        unordered_set<int> s;
        for(int i=0;i<n;i++)
            s.insert(a[i]);
        for(int j=0;j<m;j++)
        s.insert(b[j]);
        return s.size();
        
    }
    
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------
PAIR WITH GIVEN SUM IN UNSORTD ARRAY:
    
If the array is sorted then we can use two pointer pointer approach to solve the problem efficiently. But if the array is unsorted then we must use hashing technique to solve the problem.

The logic is to traverse through the array and if we find sum-arr[i] in the already traversed array and hashtable then we find the pair else insert the element in the hashtable.

I/P: 3,2,8,15,-8
SUM: 17
-- 17-3 = 14(there is nothing in the hashtable in 1st iteration so it simply inserts the element. HASHTABLE: 3
-- 17-2 = 15 (no 15 in hashtable, it inserts 2 in hashtable)  HASHTABLE: 3,2
-- 17-8 = 9 (no 9 in hashtable, it inserts 8 in hashtable)  HASHTABLE: 3,2,8
-- 17-15 = 2 (2 is present in the hashtable: 3,2,8 so we found the pair with given sum)

int pairWithSumX(int arr[],int n, int X)
{
    unordered_set<int> us;
    for(int i = 0; i < n; i++)
    {
        if(us.find(X - arr[i]) != us.end())
          return 1;
          
        us.insert(arr[i]);
    }
    return 0;
    
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

 SUB ARRAY WITH ZERO SUM: MUST BE CONTIGOUS ELEMENTS ONLY(the elements must present in continously).
 
 Here the logic is we mainatain a prefix sum variable which adds current elemets coninously and keeps checking it with hashtable if the prefix sum is already present in hashtable. If it is not present then we add that element to the hashtable else we return it if the prefix sum is present.
 
 I/P: -3,4,-3,-1,1
i = 0 presum: -3, does not present in hashtable so Hashtable: -3
i = 1 presum:-3+4 = 1 does not present in hashtable so hashtable: -3,1
i = 2 presum:1-3 = -2 does not present in hashtable so hashtable: -3,1,-2
i = 3 presum: -2-1 = -3 is already present in the hashtable: -3,1,-2 
so we return true

int ZeroSumSubarray(int arr[], int n)
{
    unordered_set<int> us;
    int prefix_sum = 0;
    us.insert(0);
    for(int i = 0; i < n; i++)
    {
        prefix_sum += arr[i];
        if(us.find(prefix_sum) != us.end())
          return 1;
        us.insert(prefix_sum);
    }
    return 0;
    
}
Time complexity: O(n).

Another variation: We neeed to print the count of all the sub arrays which results in zero sum-
You are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.


Example 1:

Input:
n = 6
arr[] = {0,0,5,5,0,0}
Output: 6
Explanation: The 6 subarrays are 
[0], [0], [0], [0], [0,0], and [0,0].

Example 2:

Input:
n = 10
arr[] = {6,-1,-3,4,-2,2,4,6,-12,-7}
Output: 4
Explanation: The 4 subarrays are [-1 -3 4]
[-2 2], [2 4 6 -12], and [-1 -3 4 -2 2]

ll findSubarray(vector<ll> arr, int n ) {
        //code here
        int presum = 0, count = 0;
        unordered_map<int, int> m;
        for(int i=0;i<n;i++){
            presum+= arr[i];
            if(presum == 0)
            count++;
            if(m.find(presum)!=m.end())
                count+=m[presum];
                m[presum]++;
        }
        return count;
    }
    

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 SUB ARRAY WITH GIVEN SUM:
 
 The approach is similar to the previous approach (sub array with zero sum), here we subtract with given sum and checks whether it is already present in the hashtable.
 we insert all presum elements in the hashtable first.
 I/P: 5,8,6,13,3,-1, sum = 22
 hashtable with presum: 5,13,19,32,35,34
 
 we have a corner case here if we dont write the line 
if(pre_sum==sum) // checks the corner case where 0th element+ ith element might result in the given sum.
            return true; 
	    eg: I/P: 1,2,4,7,  sum = 3
	      presum = 1,3,7,14
	      so when we are checking the above in the code we have
	      1-3 = -2
	      3-3 = 0
	      7-3 = 4
	      14-3 = 11 all are not present in the hashtable. But there is a sub array with given sum which is 2+1 the first two elements.
 
 then we go to each element in hashtable and keeps subtracting it with given sum, If we find the result present in the hashtable then we returns.
 
 
 
 bool isSum(int arr[], int n, int sum)
{
    unordered_set<int> s;
    int pre_sum = 0;
    for(int i = 0; i < n; i++)
    {   
        if(pre_sum==sum) // checks the corner case where 0th element+ ith element might result in the given sum.
            return true;
        pre_sum += arr[i];
        if(s.find(pre_sum-sum) != s.end())
          return true;
        s.insert(pre_sum);
    }
    return false;
}
Time complexity: O(n).

ANOTHER VARIATION: 
THE ABOVE SOLUTION IS FOR IF THEY ASK FOR ONLY ONE SUB SET, BUT if they ask for
SUB ARRAY WITH GIVE SUM: WE SHOULD PRINT THE COUNT OF ALL SUB ARRAYS WHICH GIVES THE SUM.

Then we should use the hashmap to store the count of all the prefix-sum value frequencies in the array:

eg: I/P: Input:
n = 5
arr[] = {10,2,-2,-20,10}
sum = -10
Output: 3
Explanation: Subarrays with sum -10 are: 
[10, 2, -2, -20], [2, -2, -20, 10] and 
[-20, 10].

For the above solution: The prefix sum values are:
  	presum : 10 12 10 -10 0
	Presum-sum frequencies in the hasmap: 20 22 20 0 10
	20 - 2
	22 -1
	0 - 1
	10 - 1
So we add the count of frequencies in map if there is a match to the presum-sum in the map: count+=m[presum-sum];
int subArraySum(int arr[], int n, int sum)
    {
        //Your code here
        //int count = 0;
        unordered_map<int, int> m;
        int presum = 0, count = 0;
        for(int i=0;i<n;i++){
            presum+=arr[i];
            if(presum == sum)
            count++;
            if(m.find(presum-sum)!=m.end())
            count+=m[presum-sum];
            m[presum]++;
        }
        return count;
    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

PAIR WITH A GIVEN SUM IN AN ARRAY:
You are given an array of distinct integers and a sum. Check if there's a pair with the given sum in the array.

Example 1:

Input:
N = 10
arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} 
sum = 14
Output: 
1

int sumExists(int arr[], int N, int sum) {
    // Your code here.
    unordered_set<int> s;
    for(int i=0;i<N;i++){
        if(s.find(sum-arr[i])!=s.end())
        return 1;
        else s.insert(arr[i]);
    }
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Winner of an election
EasyAccuracy: 49.75%Submissions: 29316Points: 2
Given an array of names (consisting of lowercase characters) of candidates in an election. A candidate name in array represents a vote casted to the candidate. Print the name of candidate that received Max votes. If there is tie, print lexicographically smaller name.

Example 1:

Input:
n = 13
Votes[] = {john,johnny,jackie,johnny,john 
jackie,jamie,jamie,john,johnny,jamie,
johnny,john}
Output: john 4
Explanation: john has 4 votes casted for 
him, but so does johny. john is 
lexicographically smaller, so we print 
john and the votes he received.

vector<string> winner(string arr[],int n)
    {
        // Your code here
        // Return the string containing the name and an integer
        // representing the number of votes the winning candidate got
        int votes = 0;
        string winner;
        //vector<string> res;
        unordered_map<string, int> m;
        for(int i=0;i<n;i++)
        m[arr[i]]++;
        for(auto p:m){
            if(p.second>votes){
                votes = p.second;
                winner = p.first;
            }
            else if(p.second == votes and winner>p.first)
            winner = p.first;
        }
        return {winner, to_string(votes)};
    }
    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Positive Negative Pair
EasyAccuracy: 49.71%Submissions: 21242Points: 2
Given an array of distinct integers, find all the pairs having both negative and positive values of a number in the array.


Example 1:

Input:
n = 8
arr[] = {1,3,6,-2,-1,-3,2,7}
Output: -1 1 -3 3 -2 2
Explanation: 1, 3 and 2 are present 
pairwise positive and negative. 6 and 
7 have no pair.

Using only unordered set:
 vector <int> findPairs(int arr[], int n) 
    {
        // code here
        vector<int> res;
        unordered_set<int> s;
        for(int i=0;i<n;i++){
            if(arr[i] == 0)
            continue;
            s.insert(arr[i]);
            int x = -1*arr[i];
            if(s.find(x)!=s.end() and s.find(arr[i])!=s.end()){
                if(x>0){
                    x*=-1;
                    res.push_back(x);
                    res.push_back(abs(x));
                    s.erase(x);
                    s.erase(abs(x));
                }
                else{
                  res.push_back(x);
                res.push_back(abs(x));
                s.erase(x);
                x*=-1;
                s.erase(x);  
                }
                
            }
        }
        return res;
    }
   
   Using unordered Map:
   vector<int> v;
       unordered_map<int, int> map;
       
       for(int i = 0; i < n; i++)
       {
           if(map[abs(arr[i])]) 
           {
               v.push_back(abs(arr[i]) * -1);
               v.push_back(abs(arr[i]));
           }
           else map[abs(arr[i])]++;
       }
       return v;
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LONGEST SUB ARRAY WITH GIVEN SUM:
 
 I/P: 8,3,1,5,-6,6,2,2
 sum: 4
 pre sum = 8 11 12 17 19 21
 
 The logic here is we store the indexes of every presum in which they are appearing the array and we only store the left most or the oldest occurance index if there are multiple occurances so that we get longest sub array.
 
 int largestSubarrayWithSumX(int arr[], int n, int sum)
{
    int presum = 0, res = 0;
    unordered_map<int, int> us;
    us.insert(0);
    for(int i = 0; i < n; i++)
    {
        presum += arr[i];
	if(presum == sum) res = i+1;
        if(us.find(presum) != us.end())
          us.insert({presum,i});
        if(us.find(presum-sum)!= us.end())
	res = max(res, i-us[presum-sum]);
    }
    return res;
}
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------
Longest Subarray with equal number of 0s and 1s:

I/P: 1 0 1 1 1 0 0
O/P: 0 1 1 1 0 0 = 3 0's 3 1's = 6

We can convert this solution into sub array with zero sum by converting all 0's to -1 so that we just need to find the sub array with zero sum where 1 will cancel ech other if there are equal number.

int largestZeroSubarray(int arr[], int n)
{
    for(int i = 0; i < n; i++)
     arr[i] = (arr[i] == 0) ? -1 : 1;
     
    unordered_map<int, int> ump;
    int sum = 0, maxLen = 0;
    for(int i = 0; i < n; i++)
    {
        sum += arr[i];
        if(sum == 0)
         maxLen = i+1;
         
        if(ump.find(sum+n) != ump.end())
        {
            if(maxLen < i - ump[sum+n])
             maxLen = i - ump[sum+n];
             
        }
        else ump[sum + n] = i;
    }
    
    return maxLen;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
LONGEST COMMON SPAN WITH SAME SUM IN BINARY ARRAY:
the starting anf ending index should be same in both arrays and also the sum of these elements inside these indexs range should also be same.

I/P: 0 1 0 0 0 0
     1 0 1 0 0 1 
O/P: 4

I/P: 0 1 0 1 1 1 1
     1 1 1 1 1 0 1 
O/P: => 6

I/P: 0 0 0
     1 1 1
O/P: 0

I/P: 0 0 1 0
     1 1 1 1
O/P: 1

We can reduce the problem into the problem of finding the longest subarray with zero sum.
Hint: by subtracting the two given arrays in the third array.
for(int i=0;i<n;i++)
temp[i] = arr1[i]-arr2[i];

temp for eg1: -1 1 -1 0 0 -1
now we need to find the longest sub array with zero sum in this temp array.

int longestCommonSum(bool arr1[], bool arr2[], int n) 
{ 
	// Find difference between the two 
	int arr[n]; 
	for (int i=0; i<n; i++) 
	arr[i] = arr1[i] - arr2[i]; 
	
	// Creates an empty hashMap hM 
	unordered_map<int, int> hM; 

	int sum = 0;	 // Initialize sum of elements 
	int max_len = 0; // Initialize result 

	// Traverse through the given array 
	for (int i = 0; i < n; i++) 
	{ 
		// Add current element to sum 
		sum += arr[i]; 

		// To handle sum=0 at last index 
		if (sum == 0) 
			max_len = i + 1; 

		// If this sum is seen before, 
		// then update max_len if required 
		if (hM.find(sum) != hM.end()) 
		max_len = max(max_len, i - hM[sum]); 
			
		else // Else put this sum in hash table 
			hM[sum] = i; 
	} 

	return max_len; 
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Longest Consecutive Subsequence:
Given an array, we need to find the longest subsequence that has consecutive elements. These consecutive elements may appear in any order in the subsequence.
I/P: 1 9 3 4 2 20
O/P: 4 // 1,3,4,2
I/P: 8 20 7 30
O/P: 2 // 8 7
I/P: 20 30 40
O/P: 1 20 or 30 or 40

we need to find the longest subsequence in the form of x,x+1,x+2,......x+i with these elements appearing in any order.
we have two solutions for this problem; sorting solution and hashing solution

SORTNG solution:
int findLongest(int arr[], int n)
{
    sort(arr,arr+n);
    int res=1,curr=1;
    for(int i=1;i<n;i++){
        if(arr[i]==arr[i-1]+1)
            curr++;
        else{
            res=max(res,curr);
            curr=1;
        }
    }
    res=max(res,curr);
    return res;
}

HASHING solution:
int findLongest(int arr[], int n)
{
    unordered_set<int> s;
    int res = 0;
 
    for (int i = 0; i < n; i++)
        s.insert(arr[i]);
 
    for (int i = 0; i < n; i++) {
        if (s.find(arr[i] - 1) == s.end()) {
            int curr = 1;
            while (s.find(curr+arr[i]) != s.end())
                curr++;
                
            res = max(res, curr);
        }
    }
    return res;
}

the logic is we insert all the elements inside the hashtable and the linearly checks whether every element and its 1 increment value is present in the hastable in a sequence or not. If it is present we increment the count and takes max of all counts.
-- Here while comparing every element we might be counting one element many times so we keep a condition where if x-1 element does not present in the hashtable then it is the beginning of the sequence and in next condition we keeps checking for the sequence starting from it. But if it is already present then we skip that element and goes to next element.

working: arr[] = 1 3 9 2 8 2
	hashtable: 1 3 9 2 8
	 we start with 1 - 1-1 = 0 does not present in hashtable so
	 so 1 is the starting sequence
	 	we check whether 1+1 is present in the hashtable, it is present = 1+1 = 2
		1+1 = 2, curr = 2
		2+1 = 3 present in the hashtable, curr = 3
		3+1 = 4 does not present in the hashtable, res = curr = 3
	so we come to next element which is 3 
	3-1 = 2 is already present in the hashtbale so, we might already count this sequence so we skip 3
	9-1 = 8 is already present in the hashtable so we skip 9
	9+1 = 10 is not present in the hashtable so curr = 1, res = max(res,curr) = 3
	2-1 = 1 is already present in the hashtable
	8-1 = 7 does not present in the hashtable so we might get a new sequence
		8+1 = 9 is present in the hashtable
		curr = 2
		9+1 = 10 does not present in the hashtable so we res = max(res,curr) = 3
	3 is the longest sub sequence here.



